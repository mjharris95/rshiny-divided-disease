state<-c(
#group a
SUa<-1-I0_a,
SPa<-0,
IUa<-I0_a,
IPa<-0,
RUa<-0,
RPa<-0,
DUa<-0,
DPa<-0,
#group b
SUb<-1-I0_b,
SPb<-0,
IUb<-I0_b,
IPb<-0,
RUb<-0,
RPb<-0,
DUb<-0,
DPb<-0
)
names(state)<- c("SUa", "SPa", "IUa", "IPa", "RUa", "RPa", "DUa", "DPa",
"SUb", "SPb", "IUb", "IPb", "RUb", "RPb", "DUb", "DPb")
sir_upu<-function(t, state, parameter){
with(as.list(c(parameter, state)), {
if(t<ell){
lag<-rep(0, 16)
}
else{
lag<-lagvalue(t-ell)
}
#transitions for group a
if(t>v_start){
v <- v_val
}
else{
v<-0
}
dSUa <- -sqrt(beta_a)*SUa*(sqrt(beta_a)*ha*(IUa+kappa_a*IPa)+sqrt(beta_b)*(1-ha)*(IUb+kappa_b*IPb)) -
theta_a * SUa * (epsilon_a * (DUa+DPa-lag[7]-lag[8]) + (1-epsilon_a) * (DUb+DPb-lag[15]-lag[16]) ) + phi * SPa
dSPa <- -sqrt(beta_a)*kappa_a*SPa*(sqrt(beta_a)*ha*(IUa+kappa_a*IPa)+sqrt(beta_b)*(1-ha)*(IUb+kappa_b*IPb)) +
theta_a * SUa * (epsilon_a * (DUa+DPa-lag[7]-lag[8]) + (1-epsilon_a) * (DUb+DPb-lag[15]-lag[16]) ) - phi * SPa  -
v*SPa
dIUa <- sqrt(beta_a)*SUa*(sqrt(beta_a)*ha*(IUa+kappa_a*IPa)+sqrt(beta_b)*(1-ha)*(IUb+kappa_b*IPb)) -
theta_a * IUa * (epsilon_a * (DUa+DPa-lag[7]-lag[8]) + (1-epsilon_a) * (DUb+DPb-lag[15]-lag[16]) ) + phi * IPa -
(rho_a) * IUa
dIPa <- sqrt(beta_a)*kappa_a*SPa*(sqrt(beta_a)*ha*(IUa+kappa_a*IPa)+sqrt(beta_b)*(1-ha)*(IUb+kappa_b*IPb)) +
theta_a * IUa * (epsilon_a * (DUa+DPa-lag[7]-lag[8]) + (1-epsilon_a) * (DUb+DPb-lag[15]-lag[16])  ) - phi * IPa -
(rho_a) * IPa
dRUa <- rho_a * (1-mu_a) * IUa -
theta_a * RUa * (epsilon_a * (DUa+DPa-lag[7]-lag[8]) + (1-epsilon_a) * (DUb+DPb-lag[15]-lag[16]) ) + phi * RPa
dRPa <- rho_a * (1-mu_a) * IPa + v * SPa +
theta_a * RUa * (epsilon_a * (DUa+DPa-lag[7]-lag[8]) + (1-epsilon_a) * (DUb+DPb-lag[15]-lag[16])  ) - phi * RPa
dDUa <- rho_a*mu_a*IUa
dDPa <- rho_a*mu_a*IPa
#transitions for group b
dSUb <- -sqrt(beta_b)*SUb*(sqrt(beta_a)*(1-hb)*(IUa+kappa_a*IPa)+sqrt(beta_b)*(hb)*(IUb+kappa_b*IPb)) -
theta_b * SUb * ((1-epsilon_b) * (DUa+DPa-lag[7]-lag[8]) + (epsilon_b) * (DUb+DPb-lag[15]-lag[16]) ) + phi * SPb
dSPb <- -sqrt(beta_b)*kappa_b*SPb*(sqrt(beta_a)*(1-hb)*(IUa+kappa_a*IPa)+sqrt(beta_b)*(hb)*(IUb+kappa_b*IPb)) +
theta_b * SUb * ((1-epsilon_b) * (DUa+DPa-lag[7]-lag[8]) + (epsilon_b) * (DUb+DPb-lag[15]-lag[16])  ) - phi * SPb -
v * SPb
dIUb <- sqrt(beta_b)*SUb*(sqrt(beta_a)*(1-hb)*(IUa+kappa_a*IPa)+sqrt(beta_b)*(hb)*(IUb+kappa_b*IPb)) -
theta_b * IUb * ((1-epsilon_b) * (DUa+DPa-lag[7]-lag[8]) + (epsilon_b) * (DUb+DPb-lag[15]-lag[16])  ) + phi * IPb -
(rho_b) * IUb
dIPb <- sqrt(beta_b)*kappa_b*SPb*(sqrt(beta_a)*(1-hb)*(IUa+kappa_a*IPa)+sqrt(beta_b)*(hb)*(IUb+kappa_b*IPb)) +
theta_b * IUb * ((1-epsilon_b) * (DUa+DPa-lag[7]-lag[8]) + (epsilon_b) * (DUb+DPb-lag[15]-lag[16]) ) - phi * IPb -
(rho_b) * IPb
dRUb <- (1-mu_b) * rho_b * IUb -
theta_b * RUb * ((1-epsilon_b) * (DUa+DPa-lag[7]-lag[8]) + (epsilon_b) * (DUb+DPb-lag[15]-lag[16]) ) + phi * RPb
dRPb <- (1-mu_b) * rho_b * IPb + v * SPb +
theta_b * RUb * ((1-epsilon_b) * (DUa+DPa-lag[7]-lag[8]) + (epsilon_b) * (DUb+DPb-lag[15]-lag[16])  ) - phi * RPb
dDUb <- rho_b*mu_b*IUb
dDPb <- rho_b*mu_b*IPb
return(list(c(dSUa, dSPa, dIUa, dIPa, dRUa, dRPa, dDUa, dDPa,
dSUb, dSPb, dIUb, dIPb, dRUb, dRPb, dDUb, dDPb
)))
})
}
times<-seq(from=0, to=time, by=1)
as.data.frame(dede(state, times, sir_upu, params))->sim
if(get_params){
return(list(sim=sim, params=params))
}
else{
return(sim)
}
}
theme_set(
theme_classic(base_size = 16)
)
#can change the values of h and epsilon. Both vectors can be any length.
h<-c(.5, .99)
epsilon<-c(.5, .99)
expand.grid(h=h, epsilon=epsilon)  %>%
data.frame() %>%
apply(1, function(par) full_aware(theta=100, beta=.2, rho=.1, mu=.01, h=par[["h"]],time=200, kappa=.3, I0_a=.001, I0_b=0, ell=1, phi=0, epsilon=par[["epsilon"]]) %>%
cbind(h=par[["h"]], epsilon=par[["epsilon"]])) %>%
do.call(rbind, .) %>%
mutate(eps_descript = ifelse(epsilon==.5, "Uniform Awareness",
ifelse(epsilon==.99,"Separated Awareness",
" "))) %>%
mutate(h_descript = ifelse(h==.5, "Uniform \nMixing",
ifelse(h==.99,"Separated \nMixing",
" "))) -> df
line_sz<-.8
ggplot(df)+geom_line(aes(x=time, y=IUa+IPa, colour = red), size=line_sz, color="#f4a896")+geom_line(aes(x=time, y=IUb+IPb, size=as.factor(h)), color="#358597")+
annotate("segment", x=-Inf, xend=Inf, y=-Inf, yend=-Inf, size=1)+
annotate("segment", x=-Inf, xend=-Inf, y=-Inf, yend=Inf, size=1)+
geom_hline(yintercept=c(0,.04,.08, .12), linetype="dotted", color="gray")+
facet_grid(h+h_descript~epsilon+eps_descript,
labeller=label_bquote(
cols=atop(atop(phantom(), .(eps_descript)), atop("("~epsilon==.(epsilon)~")", phantom())),
rows=atop(atop(.(h_descript), ""), atop("("~h==.(h)~")", phantom()))))+
ylab("Infections")+
theme(strip.text.y = element_text(angle = 0))+scale_y_continuous(breaks=c(0, .04, .08, .12))+
scale_size_manual(values=c("0.5"=.3*line_sz, "0.99"=line_sz), guide="none", na.value = line_sz)+
scale_colour_manual(name="",
labels = c(expression("group"~italic(a)), expression("group"~italic(b))),
values = c("group *a*"="#f4a896", "group *b*"="#358597"))+
theme(strip.text=element_text(size=20))
#geom_line(aes(x = fecha, y = value, colour = Temperature)) +
# scale_colour_manual(values = c("red", "green", "blue"))
library(cowplot)
library(grid)
library(magrittr)
library(deSolve)
library(tidyverse)
library(reshape2)
full_aware<-function(h=NA, epsilon=NA, mu=NA, kappa=NA, beta=NA, rho=NA,
theta=5, phi=.1, kappa_a=.1,  kappa_b=.1, rho_a=.1,
mu_a=.05, mu_b=.05, beta_a=.5, beta_b=.5, rho_b=.1,
ha=.99, hb=.99, epsilon_a=.5, epsilon_b=.5, ell=1, I0_a=.005/2, I0_b=.005/2, v_val=0, v_start=0, time=500, theta_a=.2, theta_b=.2,
get_params=FALSE){
if(!is.na(beta)){
beta_a<-beta
beta_b<-beta
}
if(!is.na(kappa)){
kappa_a<-kappa
kappa_b<-kappa
}
if(!is.na(mu)){
mu_a<-mu
mu_b<-mu
}
if(!is.na(rho)){
rho_a<-rho
rho_b<-rho
}
if(!is.na(h)){
ha<-h
hb<-h
}
if(!is.na(epsilon)){
epsilon_a<-epsilon
epsilon_b<-epsilon
}
if(theta != 5){
theta_a<-theta
theta_b<-theta
}
params<-c("kappa_a"=kappa_a, "kappa_b"=kappa_b,  "theta"=theta,
"beta_a"=beta_a, "beta_b"=beta_b, "rho"=rho, "phi"=phi,
"rho_a"=rho_a, "rho_b"=rho_b,
"mu_a"=mu_a, "mu_b"=mu_b, "epsilon_a"=epsilon_a, "epsilon_b"=epsilon_b,  "ha"=ha, "hb"=hb, "ell"=ell, "v_start"=v_start, "v_val"=v_val, "time"=time, "I0_a"=I0_a, "I0_b"=I0_b, "theta_a"=theta_a, "theta_b"=theta_b)
state<-c(
#group a
SUa<-1-I0_a,
SPa<-0,
IUa<-I0_a,
IPa<-0,
RUa<-0,
RPa<-0,
DUa<-0,
DPa<-0,
#group b
SUb<-1-I0_b,
SPb<-0,
IUb<-I0_b,
IPb<-0,
RUb<-0,
RPb<-0,
DUb<-0,
DPb<-0
)
names(state)<- c("SUa", "SPa", "IUa", "IPa", "RUa", "RPa", "DUa", "DPa",
"SUb", "SPb", "IUb", "IPb", "RUb", "RPb", "DUb", "DPb")
sir_upu<-function(t, state, parameter){
with(as.list(c(parameter, state)), {
if(t<ell){
lag<-rep(0, 16)
}
else{
lag<-lagvalue(t-ell)
}
#transitions for group a
if(t>v_start){
v <- v_val
}
else{
v<-0
}
dSUa <- -sqrt(beta_a)*SUa*(sqrt(beta_a)*ha*(IUa+kappa_a*IPa)+sqrt(beta_b)*(1-ha)*(IUb+kappa_b*IPb)) -
theta_a * SUa * (epsilon_a * (DUa+DPa-lag[7]-lag[8]) + (1-epsilon_a) * (DUb+DPb-lag[15]-lag[16]) ) + phi * SPa
dSPa <- -sqrt(beta_a)*kappa_a*SPa*(sqrt(beta_a)*ha*(IUa+kappa_a*IPa)+sqrt(beta_b)*(1-ha)*(IUb+kappa_b*IPb)) +
theta_a * SUa * (epsilon_a * (DUa+DPa-lag[7]-lag[8]) + (1-epsilon_a) * (DUb+DPb-lag[15]-lag[16]) ) - phi * SPa  -
v*SPa
dIUa <- sqrt(beta_a)*SUa*(sqrt(beta_a)*ha*(IUa+kappa_a*IPa)+sqrt(beta_b)*(1-ha)*(IUb+kappa_b*IPb)) -
theta_a * IUa * (epsilon_a * (DUa+DPa-lag[7]-lag[8]) + (1-epsilon_a) * (DUb+DPb-lag[15]-lag[16]) ) + phi * IPa -
(rho_a) * IUa
dIPa <- sqrt(beta_a)*kappa_a*SPa*(sqrt(beta_a)*ha*(IUa+kappa_a*IPa)+sqrt(beta_b)*(1-ha)*(IUb+kappa_b*IPb)) +
theta_a * IUa * (epsilon_a * (DUa+DPa-lag[7]-lag[8]) + (1-epsilon_a) * (DUb+DPb-lag[15]-lag[16])  ) - phi * IPa -
(rho_a) * IPa
dRUa <- rho_a * (1-mu_a) * IUa -
theta_a * RUa * (epsilon_a * (DUa+DPa-lag[7]-lag[8]) + (1-epsilon_a) * (DUb+DPb-lag[15]-lag[16]) ) + phi * RPa
dRPa <- rho_a * (1-mu_a) * IPa + v * SPa +
theta_a * RUa * (epsilon_a * (DUa+DPa-lag[7]-lag[8]) + (1-epsilon_a) * (DUb+DPb-lag[15]-lag[16])  ) - phi * RPa
dDUa <- rho_a*mu_a*IUa
dDPa <- rho_a*mu_a*IPa
#transitions for group b
dSUb <- -sqrt(beta_b)*SUb*(sqrt(beta_a)*(1-hb)*(IUa+kappa_a*IPa)+sqrt(beta_b)*(hb)*(IUb+kappa_b*IPb)) -
theta_b * SUb * ((1-epsilon_b) * (DUa+DPa-lag[7]-lag[8]) + (epsilon_b) * (DUb+DPb-lag[15]-lag[16]) ) + phi * SPb
dSPb <- -sqrt(beta_b)*kappa_b*SPb*(sqrt(beta_a)*(1-hb)*(IUa+kappa_a*IPa)+sqrt(beta_b)*(hb)*(IUb+kappa_b*IPb)) +
theta_b * SUb * ((1-epsilon_b) * (DUa+DPa-lag[7]-lag[8]) + (epsilon_b) * (DUb+DPb-lag[15]-lag[16])  ) - phi * SPb -
v * SPb
dIUb <- sqrt(beta_b)*SUb*(sqrt(beta_a)*(1-hb)*(IUa+kappa_a*IPa)+sqrt(beta_b)*(hb)*(IUb+kappa_b*IPb)) -
theta_b * IUb * ((1-epsilon_b) * (DUa+DPa-lag[7]-lag[8]) + (epsilon_b) * (DUb+DPb-lag[15]-lag[16])  ) + phi * IPb -
(rho_b) * IUb
dIPb <- sqrt(beta_b)*kappa_b*SPb*(sqrt(beta_a)*(1-hb)*(IUa+kappa_a*IPa)+sqrt(beta_b)*(hb)*(IUb+kappa_b*IPb)) +
theta_b * IUb * ((1-epsilon_b) * (DUa+DPa-lag[7]-lag[8]) + (epsilon_b) * (DUb+DPb-lag[15]-lag[16]) ) - phi * IPb -
(rho_b) * IPb
dRUb <- (1-mu_b) * rho_b * IUb -
theta_b * RUb * ((1-epsilon_b) * (DUa+DPa-lag[7]-lag[8]) + (epsilon_b) * (DUb+DPb-lag[15]-lag[16]) ) + phi * RPb
dRPb <- (1-mu_b) * rho_b * IPb + v * SPb +
theta_b * RUb * ((1-epsilon_b) * (DUa+DPa-lag[7]-lag[8]) + (epsilon_b) * (DUb+DPb-lag[15]-lag[16])  ) - phi * RPb
dDUb <- rho_b*mu_b*IUb
dDPb <- rho_b*mu_b*IPb
return(list(c(dSUa, dSPa, dIUa, dIPa, dRUa, dRPa, dDUa, dDPa,
dSUb, dSPb, dIUb, dIPb, dRUb, dRPb, dDUb, dDPb
)))
})
}
times<-seq(from=0, to=time, by=1)
as.data.frame(dede(state, times, sir_upu, params))->sim
if(get_params){
return(list(sim=sim, params=params))
}
else{
return(sim)
}
}
theme_set(
theme_classic(base_size = 16)
)
#can change the values of h and epsilon. Both vectors can be any length.
h<-c(.5, .99)
epsilon<-c(.5, .99)
expand.grid(h=h, epsilon=epsilon)  %>%
data.frame() %>%
apply(1, function(par) full_aware(theta=100, beta=.2, rho=.1, mu=.01, h=par[["h"]],time=200, kappa=.3, I0_a=.001, I0_b=0, ell=1, phi=0, epsilon=par[["epsilon"]]) %>%
cbind(h=par[["h"]], epsilon=par[["epsilon"]])) %>%
do.call(rbind, .) %>%
mutate(eps_descript = ifelse(epsilon==.5, "Uniform Awareness",
ifelse(epsilon==.99,"Separated Awareness",
" "))) %>%
mutate(h_descript = ifelse(h==.5, "Uniform \nMixing",
ifelse(h==.99,"Separated \nMixing",
" "))) -> df
line_sz<-.8
ggplot(df)+geom_line(aes(x=time, y=IUa+IPa, colour = a), size=line_sz, color="#f4a896")+geom_line(aes(x=time, y=IUb+IPb, size=as.factor(h)), color="#358597")+
annotate("segment", x=-Inf, xend=Inf, y=-Inf, yend=-Inf, size=1)+
annotate("segment", x=-Inf, xend=-Inf, y=-Inf, yend=Inf, size=1)+
geom_hline(yintercept=c(0,.04,.08, .12), linetype="dotted", color="gray")+
facet_grid(h+h_descript~epsilon+eps_descript,
labeller=label_bquote(
cols=atop(atop(phantom(), .(eps_descript)), atop("("~epsilon==.(epsilon)~")", phantom())),
rows=atop(atop(.(h_descript), ""), atop("("~h==.(h)~")", phantom()))))+
ylab("Infections")+
theme(strip.text.y = element_text(angle = 0))+scale_y_continuous(breaks=c(0, .04, .08, .12))+
scale_size_manual(values=c("0.5"=.3*line_sz, "0.99"=line_sz), guide="none", na.value = line_sz)+
scale_colour_manual(name="",
labels = c(expression("group"~italic(a)), expression("group"~italic(b))),
values = c("group *a*"="#f4a896", "group *b*"="#358597"))+
theme(strip.text=element_text(size=20))
#geom_line(aes(x = fecha, y = value, colour = Temperature)) +
# scale_colour_manual(values = c("red", "green", "blue"))
library(cowplot)
library(grid)
library(magrittr)
library(deSolve)
library(tidyverse)
library(reshape2)
full_aware<-function(h=NA, epsilon=NA, mu=NA, kappa=NA, beta=NA, rho=NA,
theta=5, phi=.1, kappa_a=.1,  kappa_b=.1, rho_a=.1,
mu_a=.05, mu_b=.05, beta_a=.5, beta_b=.5, rho_b=.1,
ha=.99, hb=.99, epsilon_a=.5, epsilon_b=.5, ell=1, I0_a=.005/2, I0_b=.005/2, v_val=0, v_start=0, time=500, theta_a=.2, theta_b=.2,
get_params=FALSE){
if(!is.na(beta)){
beta_a<-beta
beta_b<-beta
}
if(!is.na(kappa)){
kappa_a<-kappa
kappa_b<-kappa
}
if(!is.na(mu)){
mu_a<-mu
mu_b<-mu
}
if(!is.na(rho)){
rho_a<-rho
rho_b<-rho
}
if(!is.na(h)){
ha<-h
hb<-h
}
if(!is.na(epsilon)){
epsilon_a<-epsilon
epsilon_b<-epsilon
}
if(theta != 5){
theta_a<-theta
theta_b<-theta
}
params<-c("kappa_a"=kappa_a, "kappa_b"=kappa_b,  "theta"=theta,
"beta_a"=beta_a, "beta_b"=beta_b, "rho"=rho, "phi"=phi,
"rho_a"=rho_a, "rho_b"=rho_b,
"mu_a"=mu_a, "mu_b"=mu_b, "epsilon_a"=epsilon_a, "epsilon_b"=epsilon_b,  "ha"=ha, "hb"=hb, "ell"=ell, "v_start"=v_start, "v_val"=v_val, "time"=time, "I0_a"=I0_a, "I0_b"=I0_b, "theta_a"=theta_a, "theta_b"=theta_b)
state<-c(
#group a
SUa<-1-I0_a,
SPa<-0,
IUa<-I0_a,
IPa<-0,
RUa<-0,
RPa<-0,
DUa<-0,
DPa<-0,
#group b
SUb<-1-I0_b,
SPb<-0,
IUb<-I0_b,
IPb<-0,
RUb<-0,
RPb<-0,
DUb<-0,
DPb<-0
)
names(state)<- c("SUa", "SPa", "IUa", "IPa", "RUa", "RPa", "DUa", "DPa",
"SUb", "SPb", "IUb", "IPb", "RUb", "RPb", "DUb", "DPb")
sir_upu<-function(t, state, parameter){
with(as.list(c(parameter, state)), {
if(t<ell){
lag<-rep(0, 16)
}
else{
lag<-lagvalue(t-ell)
}
#transitions for group a
if(t>v_start){
v <- v_val
}
else{
v<-0
}
dSUa <- -sqrt(beta_a)*SUa*(sqrt(beta_a)*ha*(IUa+kappa_a*IPa)+sqrt(beta_b)*(1-ha)*(IUb+kappa_b*IPb)) -
theta_a * SUa * (epsilon_a * (DUa+DPa-lag[7]-lag[8]) + (1-epsilon_a) * (DUb+DPb-lag[15]-lag[16]) ) + phi * SPa
dSPa <- -sqrt(beta_a)*kappa_a*SPa*(sqrt(beta_a)*ha*(IUa+kappa_a*IPa)+sqrt(beta_b)*(1-ha)*(IUb+kappa_b*IPb)) +
theta_a * SUa * (epsilon_a * (DUa+DPa-lag[7]-lag[8]) + (1-epsilon_a) * (DUb+DPb-lag[15]-lag[16]) ) - phi * SPa  -
v*SPa
dIUa <- sqrt(beta_a)*SUa*(sqrt(beta_a)*ha*(IUa+kappa_a*IPa)+sqrt(beta_b)*(1-ha)*(IUb+kappa_b*IPb)) -
theta_a * IUa * (epsilon_a * (DUa+DPa-lag[7]-lag[8]) + (1-epsilon_a) * (DUb+DPb-lag[15]-lag[16]) ) + phi * IPa -
(rho_a) * IUa
dIPa <- sqrt(beta_a)*kappa_a*SPa*(sqrt(beta_a)*ha*(IUa+kappa_a*IPa)+sqrt(beta_b)*(1-ha)*(IUb+kappa_b*IPb)) +
theta_a * IUa * (epsilon_a * (DUa+DPa-lag[7]-lag[8]) + (1-epsilon_a) * (DUb+DPb-lag[15]-lag[16])  ) - phi * IPa -
(rho_a) * IPa
dRUa <- rho_a * (1-mu_a) * IUa -
theta_a * RUa * (epsilon_a * (DUa+DPa-lag[7]-lag[8]) + (1-epsilon_a) * (DUb+DPb-lag[15]-lag[16]) ) + phi * RPa
dRPa <- rho_a * (1-mu_a) * IPa + v * SPa +
theta_a * RUa * (epsilon_a * (DUa+DPa-lag[7]-lag[8]) + (1-epsilon_a) * (DUb+DPb-lag[15]-lag[16])  ) - phi * RPa
dDUa <- rho_a*mu_a*IUa
dDPa <- rho_a*mu_a*IPa
#transitions for group b
dSUb <- -sqrt(beta_b)*SUb*(sqrt(beta_a)*(1-hb)*(IUa+kappa_a*IPa)+sqrt(beta_b)*(hb)*(IUb+kappa_b*IPb)) -
theta_b * SUb * ((1-epsilon_b) * (DUa+DPa-lag[7]-lag[8]) + (epsilon_b) * (DUb+DPb-lag[15]-lag[16]) ) + phi * SPb
dSPb <- -sqrt(beta_b)*kappa_b*SPb*(sqrt(beta_a)*(1-hb)*(IUa+kappa_a*IPa)+sqrt(beta_b)*(hb)*(IUb+kappa_b*IPb)) +
theta_b * SUb * ((1-epsilon_b) * (DUa+DPa-lag[7]-lag[8]) + (epsilon_b) * (DUb+DPb-lag[15]-lag[16])  ) - phi * SPb -
v * SPb
dIUb <- sqrt(beta_b)*SUb*(sqrt(beta_a)*(1-hb)*(IUa+kappa_a*IPa)+sqrt(beta_b)*(hb)*(IUb+kappa_b*IPb)) -
theta_b * IUb * ((1-epsilon_b) * (DUa+DPa-lag[7]-lag[8]) + (epsilon_b) * (DUb+DPb-lag[15]-lag[16])  ) + phi * IPb -
(rho_b) * IUb
dIPb <- sqrt(beta_b)*kappa_b*SPb*(sqrt(beta_a)*(1-hb)*(IUa+kappa_a*IPa)+sqrt(beta_b)*(hb)*(IUb+kappa_b*IPb)) +
theta_b * IUb * ((1-epsilon_b) * (DUa+DPa-lag[7]-lag[8]) + (epsilon_b) * (DUb+DPb-lag[15]-lag[16]) ) - phi * IPb -
(rho_b) * IPb
dRUb <- (1-mu_b) * rho_b * IUb -
theta_b * RUb * ((1-epsilon_b) * (DUa+DPa-lag[7]-lag[8]) + (epsilon_b) * (DUb+DPb-lag[15]-lag[16]) ) + phi * RPb
dRPb <- (1-mu_b) * rho_b * IPb + v * SPb +
theta_b * RUb * ((1-epsilon_b) * (DUa+DPa-lag[7]-lag[8]) + (epsilon_b) * (DUb+DPb-lag[15]-lag[16])  ) - phi * RPb
dDUb <- rho_b*mu_b*IUb
dDPb <- rho_b*mu_b*IPb
return(list(c(dSUa, dSPa, dIUa, dIPa, dRUa, dRPa, dDUa, dDPa,
dSUb, dSPb, dIUb, dIPb, dRUb, dRPb, dDUb, dDPb
)))
})
}
times<-seq(from=0, to=time, by=1)
as.data.frame(dede(state, times, sir_upu, params))->sim
if(get_params){
return(list(sim=sim, params=params))
}
else{
return(sim)
}
}
theme_set(
theme_classic(base_size = 16)
)
#can change the values of h and epsilon. Both vectors can be any length.
h<-c(.5, .99)
epsilon<-c(.5, .99)
expand.grid(h=h, epsilon=epsilon)  %>%
data.frame() %>%
apply(1, function(par) full_aware(theta=100, beta=.2, rho=.1, mu=.01, h=par[["h"]],time=200, kappa=.3, I0_a=.001, I0_b=0, ell=1, phi=0, epsilon=par[["epsilon"]]) %>%
cbind(h=par[["h"]], epsilon=par[["epsilon"]])) %>%
do.call(rbind, .) %>%
mutate(eps_descript = ifelse(epsilon==.5, "Uniform Awareness",
ifelse(epsilon==.99,"Separated Awareness",
" "))) %>%
mutate(h_descript = ifelse(h==.5, "Uniform \nMixing",
ifelse(h==.99,"Separated \nMixing",
" "))) -> df
line_sz<-.8
ggplot(df)+geom_line(aes(x=time, y=IUa+IPa), size=line_sz, color="#f4a896")+geom_line(aes(x=time, y=IUb+IPb, size=as.factor(h)), color="#358597")+
annotate("segment", x=-Inf, xend=Inf, y=-Inf, yend=-Inf, size=1)+
annotate("segment", x=-Inf, xend=-Inf, y=-Inf, yend=Inf, size=1)+
geom_hline(yintercept=c(0,.04,.08, .12), linetype="dotted", color="gray")+
facet_grid(h+h_descript~epsilon+eps_descript,
labeller=label_bquote(
cols=atop(atop(phantom(), .(eps_descript)), atop("("~epsilon==.(epsilon)~")", phantom())),
rows=atop(atop(.(h_descript), ""), atop("("~h==.(h)~")", phantom()))))+
ylab("Infections")+
theme(strip.text.y = element_text(angle = 0))+scale_y_continuous(breaks=c(0, .04, .08, .12))+
scale_size_manual(values=c("0.5"=.3*line_sz, "0.99"=line_sz), guide="none", na.value = line_sz)+
scale_colour_manual(name="",
labels = c(expression("group"~italic(a)), expression("group"~italic(b))),
values = c("group *a*"="#f4a896", "group *b*"="#358597"))+
theme(strip.text=element_text(size=20))+
geom_line(aes(x = time, y = IUa+IPa, colour = "red"))
# scale_colour_manual(values = c("red", "green", "blue"))
runApp('GitHub/rshiny-divided-disease')
library(plyr)
library(gridExtra)
library(grid)
library(patchwork)
phi<-c(0, .01, .1 )
theta<-c(100)
ell<-c(10, 30, 90)
expand.grid(phi, theta, ell) %>%
data.frame() %>%
mutate(phi=Var1, theta=Var2, ell=Var3) %>%
apply(1, function(x) SIR_w_pbandawareness_run(phi=x[["phi"]], theta=x[["theta"]], ell=x[["ell"]], time=1000) %>% cbind(phi=x[["phi"]], theta=x[["theta"]], ell=paste0('\u2113', " = ", x[["ell"]]))) %>%  do.call(rbind, .) -> sim_df
p1<-ggplot(filter(sim_df))+geom_line(aes(x=time, y=IU+IP, group=phi, colour=as.factor(phi)), size=1, alpha=.7)+facet_wrap(~ell, nrow=3)+theme(legend.position = "none")+ylab("Infections")+ylab("Protective Attitude")+labs(colour="phi")+
theme_fivethirtyeight()+
theme(axis.line = element_line(color='black'),
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.title = element_text())+
scale_color_brewer(palette="Set1", name=expression(phi))+
scale_y_continuous()+
theme(legend.position="bottom")
p2<-ggplot(filter(sim_df))+geom_line(aes(x=time, y=SP+IP+RP, group=phi, colour=as.factor(phi)), size=1, alpha=.7)+facet_wrap(~ell, nrow=3)+ylab("Protective Attitude")+labs(colour="phi")+
theme(legend.position="bottom")+
theme_fivethirtyeight()+
theme(axis.line = element_line(color='black'),
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.title = element_text())+
scale_color_brewer(palette="Set1", name=expression(phi))
p1 + p2 + plot_layout(ncol=2, guides="collect") &
theme(legend.position='bottom')
shiny::runApp('GitHub/rshiny-divided-disease')
install.packages("remotes")
install.packages('remotes')
remotes::install_github("rstudio/shinyuieditor")
shiny::runApp('GitHub/rshiny-divided-disease')
runApp('GitHub/rshiny-divided-disease')
install.packages("videoembed")
install.packages('rtools')
install.packages('rtools')
install.packages("jsonlite", type = "source")
install.packages("jsonlite", type = "source")
install.packages("jsonlite", type = "source")
install.packages("jsonlite", type = "source")
installed.packages(rtools)
library(jsonlite)
library(jsonlite)
embed_youtube(
https://youtu.be/FHXyU0f8Ywg,
install.packages('vembedr')
library(jsonlite)
install.packages('vembedr')
embed_url('https://youtu.be/FHXyU0f8Ywg')
library(jsonlite)
library(jsonlite)
#install.packages('vembedr')
library(vembedr)
embed_url('https://youtu.be/FHXyU0f8Ywg')
shiny::runApp('GitHub/rshiny-divided-disease')
